"
" Mostly borrowed from janus and spf13
"

" ------------------------------------------------------------------------------
" General
" ------------------------------------------------------------------------------
set nocompatible           " use vim, no vi defaults
set number                 " show line numbers
set ruler                  " show line and column number in stats line
set history=1000           " store a ton of history (default is 20)
syntax enable              " syntax highlighting
set encoding=utf-8
set t_ti= t_te=            " don't switch to the terminal when running cli commands
set ttyfast                " our terminal is faaaaaaaaaast


" ------------------------------------------------------------------------------
" Formatting
" ------------------------------------------------------------------------------
set nowrap                      " don't wrap lines
set tabstop=4                   " a tab is two spaces
set shiftwidth=4                " an autoindent (with <<) is two spaces
set expandtab                   " use spaces, not tabs
set list                        " show invisible characters
set backspace=indent,eol,start  " backspace through everything in insert mode

" List chars
set listchars=""                  " reset the listchars
set listchars=tab:\ \             " a tab should display as "  "
set listchars+=trail:.            " show trailing spaces as periods
set listchars+=extends:>          " the character to show in the last column when wrap is off and the line continues beyond the right of the screen
set listchars+=precedes:<         " the character to show in the last column when wrap is off and the line continues beyond the right of the screen


" ------------------------------------------------------------------------------
" Searching
" ------------------------------------------------------------------------------
set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter


" ------------------------------------------------------------------------------
" UI
" ------------------------------------------------------------------------------
set background=dark

if has("statusline")
    set laststatus=2  " always show the status bar
endif


" ------------------------------------------------------------------------------
" Wild settings
" ------------------------------------------------------------------------------
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*


" ------------------------------------------------------------------------------
" Backup and swap files
" ------------------------------------------------------------------------------
set backupdir=~/.vim/_backup//    " where to put backup files
set directory=~/.vim/_temp//      " where to put swap files


" ------------------------------------------------------------------------------
" General Mappings
" ------------------------------------------------------------------------------
" format the entire file
nmap <leader>fef ggVG=

" cd to the directory containing the file in the buffer
nmap <silent> <leader>cd :lcd %:h<CR>

" Create the directory containing the file in the buffer
nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

" Underline the current line with '='
nmap <silent> <leader>ul :t.\|s/./=/g\|:nohls<cr>

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=


" ------------------------------------------------------------------------------
" Filetype specific settings
" ------------------------------------------------------------------------------
au BufNewFile,BufRead *.asm set filetype=asm68k
au FileType python setlocal shiftwidth=4 tabstop=4
au FileType brs setlocal shiftwidth=4 tabstop=4
au FileType yaml setlocal shiftwidth=2 tabstop=2
au FileType ruby setlocal shiftwidth=2 tabstop=2


" ------------------------------------------------------------------------------
" Plugins
" ------------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'shougo/neocomplete.vim'
Plug 'shougo/neco-vim'
Plug 'ddollar/nerdcommenter'
Plug 'vim-scripts/ZoomWin'
Plug 'tpope/vim-fugitive'
Plug 'majutsushi/tagbar'
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'itchyny/lightline.vim'

Plug 'flazz/vim-colorschemes'
Plug 'altercation/vim-colors-solarized'

Plug 'juvenn/mustache.vim'
Plug 'jcf/vim-latex'
Plug 'chooh/brightscript.vim'
Plug 'JamshedVesuna/vim-markdown-preview'

call plug#end()

" ------------------------------------------------------------------------------
" Plugins Setup
" ------------------------------------------------------------------------------
"
" NerdTree
"
autocmd vimenter * if !argc() | NERDTree | endif
map <leader>n :NERDTreeToggle<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.o$', '\.swo$', '\.swp$', '\.git','\.hg', '\.svn', '\.bzr']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=0
let NERDTreeMouseMode=2
let NERDTreeShowHidden=0

"
" Syntastic
"
let g:syntastic_auto_loc_list=2

"
" neocomplete
"
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#input_patterns = {}
endif

"
" NerdCommenter
"
map <leader>\ <plug>NERDCommenterToggle<CR>
imap <leader>\ <Esc><plug>NERDCommenterToggle<CR>i

"
" TagBar
"
nnoremap <silent> <leader>tt :TagbarToggle<CR>

"
" CtrlP
"
let g:ctrlp_custom_ignore='node_modules'

"
" lightline
"
set noshowmode
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
    \   'left': [['mode', 'paste'],
    \            ['gitbranch', 'readonly', 'filename']],
    \   'right': [['syntastic', 'lineinfo'],
    \             ['percent'],
    \             ['fileformat', 'fileencoding', 'filetype']]
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename',
    \   'gitbranch': 'fugitive#head',
    \ },
    \ 'component_expand': {
    \   'syntastic': 'SyntasticStatuslineFlag',
    \ },
    \ 'component_type': {
    \   'syntastic': 'error',
    \ }
\ }

function! LightlineFilename()
    let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let modified = &modified ? ' [+]' : ''
    return filename . modified
endfunction

augroup AutoSyntastic
    autocmd!
    autocmd BufWritePost *.* call s:syntastic()
function! s:syntastic()
    SyntasticCheck
    call lightline#update()
endfunction

"
" vim-latex
"
let g:tex_flavor='latex'

"
" vim-markdown-preview
"
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_github=1


" ------------------------------------------------------------------------------
" Post-bundle loading
" ------------------------------------------------------------------------------
filetype plugin indent on  " automatically detect file types
colorscheme solarized
