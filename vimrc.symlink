" Modeline and Notes {
"   Mostly borrowed from spf13 and janus
" }

" General {

  set nocompatible           " use vim, no vi defaults
  set number                 " show line numbers
  set ruler                  " show line and column number in stats line
  set history=1000           " store a ton of history (default is 20)
  syntax enable              " syntax highlighting
  set encoding=utf-8
  set t_ti= t_te=            " don't switch to the terminal when running cli commands
  set ttyfast                " our terminal is faaaaaaaaaast

" }


" Formatting {

  set nowrap                      " don't wrap lines
  set tabstop=4                   " a tab is two spaces
  set shiftwidth=4                " an autoindent (with <<) is two spaces
  set expandtab                   " use spaces, not tabs
  set list                        " show invisible characters
  set backspace=indent,eol,start  " backspace through everything in insert mode

  " List chars {
    set listchars=""                  " reset the listchars
    set listchars=tab:\ \             " a tab should display as "  "
    set listchars+=trail:.            " show trailing spaces as periods
    set listchars+=extends:>          " the character to show in the last column when wrap is
                                      " off and the line continues beyond the right of the screen
    set listchars+=precedes:<         " the character to show in the last column when wrap is off and the line continues beyond the right of the screen
  " }

" }

" Searching {

  set hlsearch    " highlight matches
  set incsearch   " incremental searching
  set ignorecase  " searches are case insensitive...
  set smartcase   " ... unless they contain at least one capital letter

" }


" UI {

  set background=dark

  if has("statusline")
    set laststatus=2  " always show the status bar

  "   " Start the status line
  "   set statusline=%f\ %m\ %r               " filename modified readonly
  "   set statusline+=%=                      " right alignment separator
  "   set statusline+=Buf\ #%n
  "   set statusline+=\ [%p%%]
  "   set statusline+=\ Ln\ %l:%L-%v\         " Line: currentline:totallines-column
  endif

" }


" Wild settings {

  " Disable output and VCS files
  set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

  " Disable archive files
  set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

  " Ignore bundler and sass cache
  set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

  " Disable temp and backup files
  set wildignore+=*.swp,*~,._*

" }


" Backup and swap files {

  set backupdir=~/.vim/_backup//    " where to put backup files
  set directory=~/.vim/_temp//      " where to put swap files

" }


" General Mappings {

  " format the entire file
  nmap <leader>fef ggVG=

  " cd to the directory containing the file in the buffer
  nmap <silent> <leader>cd :lcd %:h<CR>

  " Create the directory containing the file in the buffer
  nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

  " Underline the current line with '='
  nmap <silent> <leader>ul :t.\|s/./=/g\|:nohls<cr>

  " set text wrapping toggles
  nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

  " Toggle hlsearch with <leader>hs
  nmap <leader>hs :set hlsearch! hlsearch?<CR>

  " Adjust viewports to the same size
  map <Leader>= <C-w>=

" }


" Filetype specific settings {

  au BufNewFile,BufRead *.tss set filetype=css
  au BufNewFile,BufRead *.as set filetype=actionscript
  au FileType python setlocal shiftwidth=4 tabstop=4
  au FileType brs setlocal shiftwidth=4 tabstop=4

" }


" Bundles {

  " Required for Vundle
  filetype off

  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()

  " let Vundle manage Vundle - required!
  Bundle 'gmarik/vundle'

  " My Bundles
  Bundle 'scrooloose/nerdtree'
  Bundle 'scrooloose/syntastic'
  Bundle 'http://github.com/Shougo/neocomplcache.git'
  Bundle 'ddollar/nerdcommenter'
  Bundle 'tpope/vim-surround'
  Bundle 'vim-scripts/ZoomWin'
  Bundle 'bling/vim-airline'
  Bundle 'tpope/vim-fugitive'
  Bundle 'majutsushi/tagbar'
  Bundle 'kien/ctrlp.vim'
  Bundle 'mileszs/ack.vim'

  Bundle 'ivalkeen/vim-simpledb'

  Bundle 'flazz/vim-colorschemes'
  Bundle 'altercation/vim-colors-solarized'

  Bundle 'heavenshell/vim-jsdoc'
  Bundle 'beyondwords/vim-twig'
  Bundle 'groenewege/vim-less'
  Bundle 'juvenn/mustache.vim'
  Bundle 'jcf/vim-latex'
  Bundle 'chooh/brightscript.vim'
  Bundle 'cairo140/actionscript.vim'

  Bundle 'lukerandall/haskellmode-vim'

" }

" Plugins {

  " NerdTree {
    autocmd vimenter * if !argc() | NERDTree | endif
    map <leader>n :NERDTreeToggle<CR>

    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.pyc', '\~$', '\.o$', '\.swo$', '\.swp$', '\.git','\.hg', '\.svn', '\.bzr']
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=0
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=0
  " }

  " Syntastic {
    let g:syntastic_enable_signs=1
    let g:syntastic_auto_loc_list=2
    let g:syntastic_mode_map = { 'mode': 'active',
                               \ 'active_filetypes': [],
                               \ 'passive_filetypes': ['html'] }
  " }

  " neocomplcache {
    let g:acp_enableAtStartup = 0
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_smart_case = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_auto_delimiter = 1
    " let g:neocomplcache_max_list = 15
    let g:neocomplcache_force_overwrite_completefunc = 1

    " Define keyword.
    if !exists('g:neocomplcache_keyword_patterns')
      let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns._ = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g> neocomplcache#undo_completion()
    inoremap <expr><C-l> neocomplcache#complete_common_string()
    inoremap <expr><CR> neocomplcache#complete_common_string()

    " <TAB>: completion.
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

    " <CR>: close popup
    " <s-CR>: close popup and save indent.
    inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()"\<CR>" : "\<CR>"
    inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y> neocomplcache#close_popup()

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
  " }


  " NerdCommenter {
    map <leader>\ <plug>NERDCommenterToggle<CR>
    imap <leader>\ <Esc><plug>NERDCommenterToggle<CR>i
  " }

  " Airline {
    set noshowmode
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = '|'
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = '|'
    let g:airline_theme = 'solarized'

    function! CustomFiletype()
        return strlen(&filetype) ? &filetype : 'no ft'
    endfunction
    call airline#parts#define_function('filetype', 'CustomFiletype')

    function! CustomFileEncoding()
        return strlen(&fenc) ? &fenc : &enc
    endfunction
    call airline#parts#define_function('fileencoding', 'CustomFileEncoding')

    function! AirlineInit()
          let g:airline_section_x = airline#section#create_right([&fileformat . ' | ', 'fileencoding', 'filetype'])
          let g:airline_section_y = airline#section#create(['%3p%%'])
          let g:airline_section_z = 'LN %3l:%-3c'
    endfunction
    autocmd VimEnter * call AirlineInit()
  " }

  " TagBar {
    nnoremap <silent> <leader>tt :TagbarToggle<CR>
  " }

  " CtrlP {
    let g:ctrlp_custom_ignore='node_modules'
  " }

  " vim-latex {
    let g:tex_flavor='latex'
  " }
" }


" Post-bundle loading {

  filetype plugin indent on  " automatically detect file types
  colorscheme solarized

" }
